structure A = Absyn

fun collateDecs(declist) = 
let
  fun collate([], acc) = acc
    | collate(A.VarDec(v)::rst, acc) = collate(rst, acc @ [A.VarDec(v)])
    | collate(A.FunctionDec(f)::rst, acc) = collateFuns(A.FunctionDec(f)::rst, [], acc)
    | collate(A.TypeDec(t)::rst, acc) = collateTypes(A.TypeDec(t)::rst, [], acc)

  and collateFuns([], funlist, acc) = acc @ [A.FunctionDec(funlist)]
    | collateFuns(A.FunctionDec(f)::rst, funlist, acc) = 
        collateFuns(rst, funlist @ f, acc)
    | collateFuns(x::rst, funlist, acc) = 
        collate(x::rst, acc @ [A.FunctionDec(funlist)])

  and collateTypes([], typelist, acc) = acc @ [A.TypeDec(typelist)]
    | collateTypes(A.TypeDec(t)::rst, typelist, acc) = 
        collateTypes(rst, typelist @ t, acc)
    | collateTypes(x::rst, typelist, acc) = 
        collate(x::rst, acc @ [A.TypeDec(typelist)])
in
  collate(declist, [])
end

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  
		expr of A.exp | program of A.exp 
	| lvalue of A.var | lvtail of A.var -> A.var
  | exprList of A.exp list | exprSeq of (A.exp * A.pos) list
  | decList of A.dec list | declaration of A.dec
  | varDec of A.dec | funDec of A.dec | typeDec of A.dec
  | typeFieldList of A.field list | typeField of A.field | typeVal of A.ty
  | fieldList of (A.symbol * A.exp * int) list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%right ID THEN ELSE DO TO LPAREN LBRACK LBRACE
%right  ASSIGN
%right OF
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE 
%left PLUS MINUS
%left TIMES DIVIDE

%prefer THEN ELSE LPAREN ASSIGN

%value ID ("bogus")
%value INT (0)
%value STRING ("")

%%

program	: expr		(expr)

expr:
	(* Literals *) 
	  NIL			(A.NilExp)
	| STRING	(A.StringExp(STRING, STRINGleft))
	| INT			(A.IntExp(INT))

	(* Array and record creation *)
  | ID LBRACK expr RBRACK OF expr   (A.ArrayExp({typ = Symbol.symbol(ID),
                                                 size = expr1,
                                                 init = expr2,
                                                 pos = IDleft}))
  | ID LBRACE fieldList RBRACE      (A.RecordExp({fields = fieldList,
                                                  typ = Symbol.symbol(ID),
                                                  pos = IDleft}))

	(* Variables, fields and array elements *)
	| lvalue													(A.VarExp(lvalue))
  | lvalue ASSIGN expr    (A.AssignExp({var = lvalue, exp = expr,
                                        pos = lvalueleft}))
  (* Assignment *)
	(*
  | ID LBRACK expr RBRACK ASSIGN expr
                  (A.AssignExp({var = A.SubscriptVar(
                                      A.SimpleVar(Symbol.symbol(ID),
                                                  IDleft),
                                      expr1, LBRACKleft),
                                exp = expr2, pos = expr2left}))
  | ID LBRACK expr RBRACK DOT ID ASSIGN expr
                  (A.AssignExp({var = A.FieldVar(
                          A.SubscriptVar(A.SimpleVar(Symbol.symbol(ID1),
                                                     ID1left),
                                        expr1, LBRACKleft),
                          Symbol.symbol(ID2), ID2left),
                              exp = expr2, pos = expr2left}))
	*)

  (* Function call *)
  | ID LPAREN exprList RPAREN   (A.CallExp({func = Symbol.symbol(ID),
                                            args = exprList, pos = IDleft})) 

	(* Opertaions *)	
	| MINUS expr	%prec TIMES	(A.OpExp({left = A.IntExp(0), oper = A.MinusOp,
                                      right =  expr, pos = MINUSleft})) 
	| expr PLUS   expr			(A.OpExp({left = expr1, oper = A.PlusOp, 
																		right = expr2, pos = expr1left}))
  | expr MINUS  expr			(A.OpExp({left = expr1, oper = A.MinusOp, 
																		right = expr2, pos = expr1left}))
  | expr TIMES  expr			(A.OpExp({left = expr1, oper = A.TimesOp, 
																		right = expr2, pos = expr1left}))
  | expr DIVIDE expr			(A.OpExp({left = expr1, oper = A.DivideOp, 
																		right = expr2, pos = expr1left}))
  | expr EQ     expr			(A.OpExp({left = expr1, oper = A.EqOp, 
																		right = expr2, pos = expr1left}))
  | expr NEQ    expr			(A.OpExp({left = expr1, oper = A.NeqOp, 
																		right = expr2, pos = expr1left}))
  | expr GT     expr			(A.OpExp({left = expr1, oper = A.GtOp,
																		right = expr2, pos = expr1left}))
  | expr LT     expr			(A.OpExp({left = expr1, oper = A.LtOp, 
																		right = expr2, pos = expr1left}))
  | expr LE     expr			(A.OpExp({left = expr1, oper = A.LeOp, 
																		right = expr2, pos = expr1left}))
  | expr GE     expr			(A.OpExp({left = expr1, oper = A.GeOp, 
																		right = expr2, pos = expr1left}))
  | expr AND    expr			(A.IfExp({test = expr1, then' = expr2, 
																		else' = SOME(A.IntExp(0)),
                                    pos = expr1left }))
  | expr OR     expr			(A.IfExp({test = expr1, then' = A.IntExp(1), 
																		else' = SOME(expr2), pos = expr1left}))
	| LPAREN exprSeq RPAREN	(A.SeqExp(exprSeq))

  (* Control Statements *)
  | IF expr THEN expr           (A.IfExp({test = expr1, then' = expr2, 
                                          else' = NONE, pos = IFleft}))
  | IF expr THEN expr ELSE expr (A.IfExp({test = expr1, then' = expr2,
                                          else' = SOME(expr3), pos = IFleft}))
  | WHILE expr DO expr          (A.WhileExp({test = expr1, body = expr2, 
                                             pos = WHILEleft}))
  | FOR ID ASSIGN expr TO expr DO expr  (A.ForExp({var = Symbol.symbol(ID), 
                                                   escape = ref true,
                                                   lo = expr1, hi = expr2,
                                                   body = expr3, 
                                                   pos = FORleft}))
  | BREAK                       (A.BreakExp(BREAKleft))
  | LET decList IN exprSeq END  (A.LetExp({decs = collateDecs(decList), 
                                           body = A.SeqExp(exprSeq),
                                           pos = LETleft}))

lvalue : ID lvtail       ( lvtail (A.SimpleVar(Symbol.symbol(ID),IDleft)) )

lvtail : DOT ID lvtail            (fn lv => lvtail (A.FieldVar(lv, Symbol.symbol(ID), DOTleft)))
      | LBRACK expr RBRACK lvtail  (fn lv => lvtail (A.SubscriptVar(lv, expr, LBRACKleft)))
      |                           (fn lv => lv)

exprList: (* nothing *)   ([])
      |   expr            ([expr])
      |   exprList COMMA expr (exprList @ [expr])

exprSeq:  (* nothing *)             ([])
      |   expr                      ([(expr, exprleft)])
      |   exprSeq SEMICOLON expr    ( exprSeq @ [(expr, exprleft)]) 

fieldList: (* nothing *)              ([])
        |  ID EQ expr                 ([(Symbol.symbol(ID), expr, IDleft)])
        |  fieldList COMMA ID EQ expr (fieldList @ [(Symbol.symbol(ID),
                                                     expr, IDleft)])

decList: declaration                ([declaration])
      |  decList declaration        (decList @ [declaration])

declaration: varDec                 (varDec)
          |  funDec                 (funDec)
          |  typeDec                (typeDec)

typeDec: TYPE ID EQ typeVal (A.TypeDec([{name = Symbol.symbol(ID),
                                         ty = typeVal,
                                         pos = TYPEleft}]))

typeVal: ID                           (A.NameTy(Symbol.symbol(ID), IDleft))
      |  LBRACE typeFieldList RBRACE  (A.RecordTy(typeFieldList))
      |  ARRAY OF ID                  (A.ArrayTy(Symbol.symbol(ID), ARRAYleft))

funDec: FUNCTION ID LPAREN typeFieldList RPAREN EQ expr
        (A.FunctionDec[{name = Symbol.symbol(ID), params = typeFieldList,
                        result = NONE, body = expr, pos = FUNCTIONleft}]) 
    |   FUNCTION ID LPAREN typeFieldList RPAREN COLON ID EQ expr
        (A.FunctionDec[{name = Symbol.symbol(ID1), params = typeFieldList,
                        result = SOME(Symbol.symbol(ID2), ID2left), 
                        body = expr, pos = FUNCTIONleft}]) 
 
varDec: VAR ID ASSIGN expr          (A.VarDec({name = Symbol.symbol(ID),
                                               escape = ref true,
                                               typ = NONE,
                                               init = expr,
                                               pos = VARleft}))
    |   VAR ID COLON ID ASSIGN expr (A.VarDec({name = Symbol.symbol(ID1),
                                               escape = ref true,
                                               typ = SOME(Symbol.symbol(ID2), 
                                                          ID2left),
                                               init = expr,
                                               pos = VARleft}))


typeFieldList: (* nothing *)                  ([])
            |  typeField                      ([typeField])
            |  typeFieldList COMMA typeField  (typeFieldList @ [typeField])

typeField: ID COLON ID  ({name = Symbol.symbol(ID1),
                          escape = ref true,
                          typ = Symbol.symbol(ID2),
                          pos = ID1left})

                          (*
lvalue: ID                          (A.SimpleVar(Symbol.symbol(ID), IDleft))
    |   lvalue DOT ID               (A.FieldVar(lvalue, Symbol.symbol(ID),
                                                IDleft))
    |   lvalue LBRACK expr RBRACK   (A.SubscriptVar(lvalue, expr, LBRACKleft))
    *)
